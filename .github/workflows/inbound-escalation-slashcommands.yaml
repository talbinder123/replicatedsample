on:
  issue_comment:
    types: [created]

name: Issue Comments
jobs:
  check_comments:
    name: Apply Slash Commands from Issue Comment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        if: "contains(github.event.comment.body, '/open') || contains(github.event.comment.body, '/pending') || contains(github.event.comment.body, '/close')"
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
                    core.info(context);
                    console.log(context);
                    try {
                      const membership = await github.orgs.checkPublicMembershipForUser({
                        org: "replicatedhq",
                        username: context.payload.comment.user.login,
                      });
                      if (!membership.status === 204) {
                        core.setFailed("failed to verify repo membership");
                      }
                    } catch (e) {
                      core.setFailed("failed to verify repo membership");
                    }
                    
                    core.info("repo check done");
                    const owner = context.payload.repository.owner.login;
                    const repo = context.payload.repository.name;

                    const projects = await github.projects.listForRepo({ owner, repo });
                    // there should always be exactly one
                    const escalationProj = projects.data.filter(
                      (p) => p.name.indexOf("Inbound Escalations") !== -1
                    )[0];
                    if (!escalationProj) {
                      core.setFailed("Could not find a board called 'Inbound Escalations'");
                    }
                    core.info("found escalation project");
                    const columns = await github.projects.listColumns({
                      project_id: escalationProj.id,
                    });
                    const columnToCards = async (column) => {
                      return {
                        column,
                        cards: await github.projects.listCards({
                          column_id: column.id,
                        }),
                      };
                    };
                    /**
                     * Use the list of columns, fetch all cards for each, then build:
                     *
                     * [
                     *   { name: "New", data: [ {card1}, {card2}]}
                     *   { name: "Open", data: [ {card1}, {card2}]}
                     *   ...
                     * ]
                     */
                    const allCards = await Promise.all(
                      columns.data
                        .map(columnToCards)
                        .map((card) =>
                          card.then((card2) => ({
                            name: card2.column.name,
                            data: card2.cards.data,
                          }))
                        )
                    );
                    core.info("got all cards");
                    /**
                     * now let's transform the above to
                     * [{card1}, {card2}]
                     */
                    const flatCards = allCards.map((c) => c.data).flat();
                    // Assume there is at least one card on the board that matches the issue here
                    const thisCard = flatCards.filter(
                      (c) => c.content_url === context.payload.issue.url
                    )[0];
                    if (!thisCard) {
                      core.setFailed("Could not find a card on the Inbound Escalations board that matches this issue");
                    }
                    core.info("found matching card for commented issue");
                    const openColumn = columns.data.filter((c) => c.name == "Open")[0];
                    const closedColumn = columns.data.filter((c) => c.name == "Closed")[0];
                    const pendingColumn = columns.data.filter((c) => c.name == "Pending")[0];
                    
                    if (context.payload.comment.body.indexOf("/open") !== -1) {
                      core.info("moving to Open");
                      github.projects.moveCard({
                        card_id: thisCard.id,
                        position: "bottom",
                        column_id: openColumn.id,
                      });
                      github.issues.update({
                        owner, repo,
                        issue_number: context.payload.issue.number,
                        state: "open",
                      });
                    } else if (context.payload.comment.body.indexOf("/close") !== -1) {
                      core.info("moving to Closed");
                      github.projects.moveCard({
                        card_id: thisCard.id,
                        position: "bottom",
                        column_id: closedColumn.id,
                      });
                      github.issues.update({
                        owner, repo,
                        issue_number: context.payload.issue.number,
                        state: "closed",
                      });
                    } else if (context.payload.comment.body.indexOf("/pending") !== -1) {
                      core.info("moving to Pending");
                      github.projects.moveCard({
                        card_id: thisCard.id,
                        position: "bottom",
                        column_id: pendingColumn.id,
                      });
                      github.issues.update({
                        owner, repo,
                        issue_number: context.payload.issue.number,
                        state: "open",
                      });
                    }
